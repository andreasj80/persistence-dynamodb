app {
  persistence {
    dynamodb {
      table {
        counter-state {
          table-name = "test-counter-state"
          read-capacity-units = 1000
          write-capacity-units = 100
        }
      }
    }
  }
}

//play.application.loader = com.lightbend.lagom.dynamodb.service.TestCounterLoader
play.http.secret.key = "changeme"
play.http.secret.key = ${?PLAY_SECRET}

akka.actor {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  //  TODO need to ensure correct with Tagged, try with play-json from lightbend
  allow-java-serialization = on
  serialization-bindings {
    "com.lightbend.lagom.dynamodb.service.TestRemoting" = kryo
  }
  serializers {
    kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
  }
}

lagom {
  cluster.join-self = true
  cluster.exit-jvm-when-system-terminated = off
  persistence {
    application-name = "test-dynamodb-lagom-test-counter-application"
    max-number-of-shards = 100
    snapshot-after = off // todo https://github.com/lagom/lagom/issues/1611
    passivate-after-idle-timeout = 120s
    run-entities-on-role = ""
    ask-timeout = 300s
    dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 16
      }
      throughput = 1
    }
    read-side {
      dynamodb {
        tables-autocreate = true
        process-only-max-by-offset = false
      }
    }
  }
  circuit-breaker {
    default {
      enabled = off
    }
  }
}

aws {
  dynamodb {
    region = "eu-west-1"
    region = ${?AWS_REGION}
    region = ${?AWS_DYNAMO_DB_REGION}
    host = "localhost"
    host = ${?AWS_DYNAMO_DB_HOST}
    endpoint = "http://localhost:4569"
    endpoint = ${?AWS_DYNAMO_DB_ENDPOINT}
    port = 4569
    port = ${?AWS_DYNAMO_DB_PORT}
    tls = false
    tls = ${?AWS_DYNAMO_DB_TLS}
    parallelism = 32
    parallelism = ${?AWS_DYNAMO_DB_PARALLELISM}
    credentials {
      access-key-id = "dummy-access-key"
      access-key-id = ${?AWS_DYNAMO_DB_ACCESS_KEY_ID}
      secret-key-id = "dummy-secret-key"
      secret-key-id = ${?AWS_DYNAMO_DB_SECRET_KEY_ID}
    }
  }
}

akka.stream.alpakka.dynamodb {
  region = ${aws.dynamodb.region}
  host = ${aws.dynamodb.host}
  port = ${aws.dynamodb.port}
  tls = ${aws.dynamodb.tls}
  parallelism = ${aws.dynamodb.parallelism}
  credentials {
    access-key-id = ${aws.dynamodb.credentials.access-key-id}
    secret-key-id = ${aws.dynamodb.credentials.secret-key-id}
  }
}

akka.persistence.journal.plugin = "app-dynamodb-journal"
app-dynamodb-journal = ${dynamodb-journal}
app-dynamodb-journal {
  journal-table = "test-counter-akka-persistence"
  journal-name = "test-counter"
  aws-access-key-id = ${aws.dynamodb.credentials.access-key-id}
  aws-secret-access-key = ${aws.dynamodb.credentials.secret-key-id}
  endpoint = ${aws.dynamodb.endpoint}
}

akka.persistence.snapshot-store.plugin = "app-dynamodb-snapshot-store"
app-dynamodb-snapshot-store = ${dynamodb-snapshot-store}
app-dynamodb-snapshot-store {
  snapshot-table = "test-counter-akka-persistence-snapshot"
  journal-name = "test-counter"
  aws-access-key-id = ${aws.dynamodb.credentials.access-key-id}
  aws-secret-access-key = ${aws.dynamodb.credentials.secret-key-id}
  endpoint = ${aws.dynamodb.endpoint}
}
